{"version":3,"sources":["components/TodoList/TodoList.module.scss","components/TodoItem/TodoItem.module.scss","components/App/App.module.scss","discord_checkmark-transparent.png","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","props","state","this","item","title","done","className","styles","active","join","onDoubleClick","remove","onClick","check","React","Component","TodoList","save","setTimeout","localStorage","setItem","JSON","stringify","list","console","log","keyPress","e","value","key","trim","unshift","id","Math","random","Date","now","setState","onChange","target","idx","map","i","_idx","filter","parse","getItem","head","input_con","type","input","onKeyPress","autoFocus","style","backgroundImage","length","empty","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb5e47d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList_TodoList__3hnL-\",\"head\":\"TodoList_head__3dXUh\",\"input_con\":\"TodoList_input_con__2icSv\",\"input\":\"TodoList_input__2BCal\",\"list\":\"TodoList_list__1X2Te\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoItem\":\"TodoItem_TodoItem__33Fsv\",\"title\":\"TodoItem_title__2evFb\",\"check\":\"TodoItem_check__2Y-Rx\",\"active\":\"TodoItem_active__3eT2V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2mBMi\"};","module.exports = __webpack_public_path__ + \"static/media/discord_checkmark-transparent.2084a054.png\";","import React from \"react\";\nimport styles from \"./TodoItem.module.scss\";\n\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    let { title, done } = this.props.item;\n    return (\n      <div\n        className={[styles.TodoItem, done && styles.active].join(\" \")}\n        onDoubleClick={this.props.remove}\n      >\n        <span\n          onClick={this.props.done}\n          className={[styles.check].join(\" \")}\n        ></span>\n        <span className={styles.title}>{title}</span>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React from \"react\";\nimport styles from \"./TodoList.module.scss\";\nimport TodoItem from \"../TodoItem/TodoItem\";\nimport empty from \"../../discord_checkmark-transparent.png\";\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      list: JSON.parse(localStorage.getItem(\"data\") || \"[]\")\n    };\n  }\n  save = () => {\n    // timeout so we dont save before SetState\n    setTimeout(() => {\n      localStorage.setItem(\"data\", JSON.stringify(this.state.list));\n      console.log(\"after save\", JSON.stringify(this.state.list));\n    }, 500);\n  };\n  keyPress = e => {\n    let { value, list } = this.state;\n    if (e.key === \"Enter\" && value.trim() !== \"\") {\n      list.unshift({ title: value, id: Math.random() + Date.now() });\n      this.setState({ list, value: \"\" });\n      this.save();\n    }\n  };\n  onChange = ({ target }) => {\n    this.setState({ value: target.value });\n  };\n  done = idx => {\n    let { list } = this.state;\n    list = list.map((i, _idx) => {\n      if (idx === _idx) i.done = !i.done;\n      return i;\n    });\n    this.setState({ list });\n    this.save();\n  };\n  remove = key => {\n    let { list } = this.state;\n    this.setState({ list: list.filter(i => i.id !== key) });\n    this.save();\n  };\n  render() {\n    let { value, list } = this.state;\n    return (\n      <div className={styles.TodoList}>\n        <header>\n          <h2 className={styles.head}>{\"Awesome list\"}</h2>\n        </header>\n        <div className={styles.input_con}>\n          <input\n            type=\"text\"\n            value={value}\n            className={styles.input}\n            onChange={this.onChange}\n            onKeyPress={this.keyPress}\n            autoFocus\n          />\n        </div>\n        <div\n          className={styles.list}\n          style={{ backgroundImage: list.length === 0 && `url(${empty})` }}\n        >\n          {list.map((i, idx) => (\n            <TodoItem\n              item={i}\n              key={idx}\n              done={() => {\n                this.done(idx);\n              }}\n              remove={() => {\n                this.remove(i.id);\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport styles from \"./App.module.scss\";\nimport TodoList from \"../TodoList/TodoList\";\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}